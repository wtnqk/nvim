#+TITLE: Neovim Plugin Configuration & Keybindings
#+AUTHOR: wtnqk
#+DATE: 2025-08-03
#+STARTUP: overview

* Plugin Manager
** lazy.nvim
   - Package manager for Neovim
   - Bootstrap: Automatically installed on first run
   - Keybinding: ~<Leader>l~ - Open Lazy UI

* Core Utilities
** snacks.nvim
   Modern Neovim utilities collection
   - Keybindings:
     - ~<Leader>.~ - Toggle scratch buffer
     - ~<Leader>S~ - Select scratch buffer
     - ~<Leader>n~ - Show notification history
     - ~<Leader>un~ - Dismiss all notifications

** plenary.nvim
   - Lua utility functions used by many plugins
   - Required dependency for multiple plugins

** sqlite.lua
   - SQLite support for Neovim
   - Required for yanky.nvim persistence

** nui.nvim
   - UI component library
   - Dependency for noice.nvim and neo-tree.nvim

* Editor Enhancement
** which-key.nvim
   Display available keybindings in popup
   - Auto-triggered after timeout when pressing leader key

** flash.nvim
   Enhanced character motions
   - Keybindings:
     - ~s~ - Flash jump (2 chars)
     - ~S~ - Flash treesitter
     - ~r~ (operator) - Remote flash
     - ~R~ (operator) - Treesitter search
     - ~<C-s>~ (insert) - Toggle flash search

** gitsigns.nvim
   Git decorations and operations
   - Keybindings:
     - ~]h~ - Next hunk
     - ~[h~ - Previous hunk
     - ~<Leader>hs~ - Stage hunk
     - ~<Leader>hr~ - Reset hunk
     - ~<Leader>hS~ - Stage buffer
     - ~<Leader>hu~ - Undo stage hunk
     - ~<Leader>hR~ - Reset buffer
     - ~<Leader>hp~ - Preview hunk
     - ~<Leader>hb~ - Blame line
     - ~<Leader>hB~ - Toggle blame
     - ~<Leader>hd~ - Diff this
     - ~<Leader>hD~ - Diff this ~

** trouble.nvim
   Pretty diagnostics, references, quickfix
   - Keybindings:
     - ~<Leader>et~ - Toggle trouble
     - ~<Leader>ed~ - Diagnostics (trouble)
     - ~<Leader>eD~ - Buffer diagnostics
     - ~<Leader>eL~ - Location list
     - ~<Leader>eQ~ - Quickfix list
     - ~<Leader>eT~ - Todo/Fix/Fixme

** todo-comments.nvim
   Highlight and search todo comments
   - Keybindings:
     - ~]t~ - Next todo comment
     - ~[t~ - Previous todo comment
     - ~<Leader>et~ - Todo trouble
     - ~<Leader>eT~ - Todo/Fix/Fixme trouble
   - Keywords: TODO, FIX, FIXME, HACK, WARN, PERF, NOTE, TEST

** grug-far.nvim
   Find and replace across files
   - Keybindings:
     - ~<Leader>sr~ - Search and replace

** neo-tree.nvim
   File explorer tree
   - Dependencies: plenary.nvim, nvim-web-devicons, nui.nvim
   - Keybindings:
     - ~<Leader>e~ - Explorer neo-tree (cwd)
     - ~<Leader>E~ - Explorer neo-tree (root)
     - ~<Leader>ge~ - Git explorer
     - ~<Leader>be~ - Buffer explorer

** persistence.nvim
   Session management
   - Keybindings:
     - ~<Leader>qs~ - Restore session
     - ~<Leader>qS~ - Select session
     - ~<Leader>ql~ - Restore last session
     - ~<Leader>qd~ - Don't save current session

* Coding
** mini.surround
   Surround text with pairs (replaces nvim-surround)
   - Keybindings:
     - ~sa{motion}{char}~ - Add surround
     - ~sd{char}~ - Delete surround
     - ~sr{target}{replacement}~ - Change surround
     - ~sf~/~sF~ - Find surround forward/backward
     - ~sh~/~sn~ - Highlight/update n lines

** mini.pairs
   Auto-pairing of brackets
   - Auto-pairs: (), [], {}, "", '', ``

** ts-comments.nvim
   Enhanced comment handling with treesitter
   - Provides context-aware commenting

** nvim-treesitter-endwise
   Automatically add end keywords
   - Auto-closes blocks in Ruby, Lua, Vimscript, etc.

** vim-matchup
   Enhanced % matching
   - Extended matching for brackets and keywords
   - Integrates with treesitter

** yanky.nvim
   Enhanced yank operations
   - Dependencies: sqlite.lua (for persistence)
   - Keybindings:
     - ~y~ - Yank (enhanced)
     - ~p~ - Put after (enhanced)
     - ~P~ - Put before (enhanced)
     - ~gp~ - Put after and leave cursor
     - ~gP~ - Put before and leave cursor
     - ~<Leader>p~ - Select from yank history
     - ~[y~ - Cycle backward through yank history
     - ~]y~ - Cycle forward through yank history

** blink.cmp
   Completion engine
   - Dependencies: blink.compat, friendly-snippets
   - Keybindings:
     - ~<C-n>~ - Next completion
     - ~<C-p>~ - Previous completion
     - ~<C-y>~ - Accept completion
     - ~<CR>~ - Accept completion
     - ~<C-Space>~ - Trigger completion
     - ~<Tab>~ - Jump to next snippet placeholder
     - ~<S-Tab>~ - Jump to previous snippet placeholder

** blink.compat
   Compatibility layer for blink.cmp
   - Bridges various completion sources

** friendly-snippets
   Collection of snippets for various languages

** lazydev.nvim
   Lua development for Neovim config
   - Auto-completes Neovim API
   - Provides type information for Neovim Lua API

** mini.ai
   Extended text objects
   - Text objects:
     - ~i~/~a~ + ~(~, ~[~, ~{~, ~<~, ~"~, ~'~, ~`~ - Brackets/quotes
     - ~if~/~af~ - Function
     - ~ic~/~ac~ - Class
     - ~ia~/~aa~ - Argument
     - ~ii~/~ai~ - Indent

** mini.align
   Align text
   - Keybindings:
     - ~ga~ - Start align mode
     - ~gA~ - Start align with preview

** mini.hipatterns
   Highlight patterns in code
   - Patterns: TODO, FIXME, HACK, NOTE, hex colors

** nvim-highlight-colors
   Highlight color codes
   - Shows colors inline for hex, rgb, hsl values

** ccc.nvim
   Color picker and converter
   - Interactive color selection and conversion

** vim-sleuth
   Auto-detect indentation
   - Automatically adjusts shiftwidth and expandtab

** neotest
   Test runner framework
   - Dependencies: nvim-nio, plenary.nvim
   - Keybindings:
     - ~<Leader>tt~ - Run nearest test
     - ~<Leader>tT~ - Run all tests in file
     - ~<Leader>tr~ - Run tests
     - ~<Leader>ts~ - Toggle summary
     - ~<Leader>to~ - Toggle output
     - ~<Leader>tO~ - Toggle output panel
     - ~<Leader>tS~ - Stop tests
     - ~<Leader>tw~ - Toggle watch

*** Neotest Adapters
    - neotest-plenary - Plenary test adapter
    - neotest-vim-test - Vim-test adapter
    - neotest-phpunit - PHPUnit adapter
    - neotest-vitest - Vitest adapter
    - neotest-jest - Jest adapter
    - neotest-python - Python adapter
    - neotest-rust - Rust adapter
    - neotest-zig - Zig adapter
    - neotest-bash - Bash adapter

** nvim-nio
   Asynchronous I/O library
   - Required dependency for neotest

* UI
** lualine.nvim
   Statusline
   - Shows: mode, branch, diagnostics, file, git diff, location, time

** bufferline.nvim
   Buffer tabs
   - Keybindings:
     - ~<Leader>bp~ - Toggle pin
     - ~<Leader>bP~ - Delete non-pinned buffers
     - ~<Leader>bo~ - Delete other buffers
     - ~<Leader>br~ - Delete buffers to the right
     - ~<Leader>bl~ - Delete buffers to the left
     - ~<S-h>~ - Previous buffer
     - ~<S-l>~ - Next buffer
     - ~[b~ - Previous buffer
     - ~]b~ - Next buffer

** noice.nvim
   UI for messages, cmdline, popupmenu
   - Dependencies: nui.nvim
   - Keybindings:
     - ~<Leader>sn~ - Noice (messages)
     - ~<Leader>sna~ - All messages
     - ~<Leader>snd~ - Dismiss all
     - ~<Leader>snt~ - Telescope
     - ~<C-f>~ (in cmdline) - Scroll forward
     - ~<C-b>~ (in cmdline) - Scroll backward

** mini.icons
   File and filetype icons
   - Provides icons for various file types
   - Used by multiple plugins

** nvim-web-devicons
   Alternative icon provider
   - Dependency for neo-tree.nvim

** deadcolumn.nvim
   Adaptive column indicator
   - Shows column limit dynamically based on content

** nvim-treesitter-context
   Show code context at top of window
   - Displays current function/class context

** incline.nvim
   Floating filename display
   - Shows filename in floating window for splits

* Treesitter
** nvim-treesitter
   Syntax highlighting and code understanding
   - Keybindings:
     - ~<C-Space>~ - Incremental selection
     - ~<BS>~ (visual) - Decrement selection
   - Text objects:
     - ~]f~/~[f~ - Next/prev function
     - ~]c~/~[c~ - Next/prev class
     - ~]a~/~[a~ - Next/prev parameter

** nvim-treesitter-textobjects
   Treesitter-based text objects
   - Additional navigation based on syntax tree

** nvim-ts-autotag
   Auto close and rename HTML tags
   - Auto-closes HTML/JSX tags

* LSP
** nvim-lspconfig
   LSP client configurations
   - Servers: lua_ls, intelephense (PHP), jsonls, yamlls, marksman, taplo
   - Keybindings:
     - ~gd~ - Go to definition
     - ~gr~ - Go to references
     - ~gI~ - Go to implementation
     - ~gy~ - Go to type definition
     - ~gD~ - Go to declaration
     - ~K~ - Hover documentation
     - ~gK~ - Signature help
     - ~<C-k>~ (insert) - Signature help
     - ~<Leader>ca~ - Code action
     - ~<Leader>cc~ - Run codelens
     - ~<Leader>cC~ - Refresh codelens
     - ~<Leader>cR~ - Rename file
     - ~<Leader>cr~ - Rename symbol
     - ~<Leader>cA~ - Source action

** mason.nvim
   LSP/DAP/Linter/Formatter installer
   - Keybindings:
     - ~<Leader>cm~ - Open Mason UI
   - Auto-installs: stylua, shfmt, prettier, php-cs-fixer, blade-formatter

** mason-lspconfig.nvim
   Bridge between mason.nvim and nvim-lspconfig
   - Automatically installs configured LSP servers

** lsp_signature.nvim
   LSP signature help
   - Shows function signatures while typing
   - Toggle: ~<M-x>~

** inc-rename.nvim
   Incremental LSP rename
   - Preview rename in real-time

* Formatting & Linting
** conform.nvim
   Formatter manager
   - Keybindings:
     - ~<Leader>cf~ - Format
     - ~<Leader>uf~ - Toggle auto-format (global)
     - ~<Leader>uF~ - Toggle auto-format (buffer)
   - Formatters: prettier, stylua, shfmt, php_cs_fixer, blade-formatter, black, isort, rustfmt, sql-formatter, taplo

** nvim-lint
   Linter manager
   - Auto-runs on save
   - Linters: hadolint, jsonlint, selene, markdownlint-cli2, phpstan, pylint, shellcheck, yamllint

* Language Support
** PHP/Blade
   - blade-nav.nvim - Blade navigation
   - vim-blade - Blade syntax
   - Intelephense LSP with WordPress stubs

** Markdown
   - render-markdown.nvim - Preview in buffer
   - markdown-preview.nvim - Browser preview (~<Leader>cp~)

** Git
   - lazygit.nvim - Terminal UI for git
     - ~<Leader>gg~ - Open LazyGit
     - ~<Leader>gG~ - LazyGit (current file)
     - ~<Leader>gf~ - LazyGit filter
     - ~<Leader>gF~ - LazyGit filter (current file)
   - diffview.nvim - Diff viewer
     - ~<Leader>gv~ - Open diff view
     - ~<Leader>gV~ - Close diff view
   - git-conflict.nvim - Conflict resolution
     - ~co~ - Choose ours
     - ~ct~ - Choose theirs
     - ~c0~ - Choose none
     - ~cb~ - Choose both
     - ~]x~/~[x~ - Next/prev conflict
   - committia.vim - Better commit interface
   - blame.nvim - Git blame viewer
     - ~<Leader>gb~ - Toggle git blame

** Database/SQL
   - vim-dadbod - Database interface
   - vim-dadbod-ui - Database UI (~<Leader>D~)
   - vim-dadbod-completion - SQL completion

** Rust
   - crates.nvim - Cargo.toml support
   - Shows crate versions and updates

** JSON/YAML
   - SchemaStore.nvim - JSON/YAML schemas
   - nvim-jqx - JSON manipulation tool

** Typst
   - typst.vim - Typst language support

** Graphviz
   - wmgraphviz.vim - DOT language support

** Swagger
   - swagger-preview.nvim - OpenAPI/Swagger preview

* Terminal
** toggleterm.nvim
   Terminal integration
   - Keybindings:
     - ~<C-/>~ - Toggle terminal
     - ~<Leader>ft~ - Terminal (root dir)
     - ~<Leader>fT~ - Terminal (cwd)

* Colorschemes
   Available themes:
   - **kanagawa** (default) - Japanese-inspired theme
   - **catppuccin** - Pastel theme
   - **tokyonight** - Tokyo night theme
   - **rose-pine** - Rosé Pine theme
   - **onedark** - Atom OneDark theme
   - **obscure** - Obscure theme

* Global Keybindings
** Window Management
   - ~<C-h/j/k/l>~ - Navigate windows
   - ~<C-Arrow>~ - Resize windows
   - ~<Leader>-~ - Split below
   - ~<Leader>|~ - Split right
   - ~<Leader>wd~ - Delete window
   - ~<Leader>wm~ - Toggle maximize

** Buffer Management
   - ~<S-h>~ - Previous buffer
   - ~<S-l>~ - Next buffer
   - ~[b~ - Previous buffer
   - ~]b~ - Next buffer
   - ~<Leader>bb~ - Switch to other buffer
   - ~<Leader>`~ - Switch to other buffer
   - ~<Leader>bd~ - Delete buffer
   - ~<Leader>bD~ - Delete buffer and window

** Diagnostics
   - ~]d~/~[d~ - Next/prev diagnostic
   - ~]e~/~[e~ - Next/prev error
   - ~]w~/~[w~ - Next/prev warning
   - ~<Leader>cd~ - Line diagnostics

** File Operations
   - ~<Leader>fn~ - New file
   - ~<Leader>fy~ - Yank relative path
   - ~<Leader>fY~ - Yank full path

** Tabs
   - ~<Leader><Tab><Tab>~ - New tab
   - ~<Leader><Tab>]~ - Next tab
   - ~<Leader><Tab>[~ - Previous tab
   - ~<Leader><Tab>d~ - Close tab
   - ~<Leader><Tab>f~ - First tab
   - ~<Leader><Tab>l~ - Last tab
   - ~<Leader><Tab>o~ - Close other tabs

** Toggle Options
   - ~<Leader>us~ - Toggle spell
   - ~<Leader>uw~ - Toggle wrap
   - ~<Leader>uL~ - Toggle relative line numbers
   - ~<Leader>ud~ - Toggle diagnostics
   - ~<Leader>ul~ - Toggle line numbers
   - ~<Leader>uc~ - Toggle conceal level
   - ~<Leader>uT~ - Toggle treesitter highlight
   - ~<Leader>ub~ - Toggle background (dark/light)
   - ~<Leader>uh~ - Toggle inlay hints
   - ~<Leader>ui~ - Toggle indent guides
   - ~<Leader>uf~ - Toggle auto-format (global)
   - ~<Leader>uF~ - Toggle auto-format (buffer)

** Quit/Session
   - ~<Leader>qq~ - Quit all
   - ~<Leader>qs~ - Restore session
   - ~<Leader>ql~ - Restore last session
   - ~<Leader>qd~ - Don't save current session

** Other
   - ~<Esc><Esc>~ - Clear search highlight
   - ~n~ (in normal mode) - Next search result (centered)
   - ~N~ (in normal mode) - Previous search result (centered)
   - ~<Leader>l~ - Lazy plugin manager
   - ~<Leader>L~ - Lazy plugin manager changelog
   - ~<Leader>fn~ - New file
   - ~<Leader>xl~ - Location list
   - ~<Leader>xq~ - Quickfix list
   - ~[q~ - Previous quickfix
   - ~]q~ - Next quickfix
   - ~gco~ - Add comment below
   - ~gcO~ - Add comment above
   - ~<Leader>K~ - Keywordprg (documentation)
   - ~<Leader>ur~ - Redraw / clear hlsearch / diff update
   - ~n~/~N~ - Better n and N with centered view
   - ~<Leader>ui~ - Inspect position
   - ~<Leader>uI~ - Inspect tree
   - ~<Leader>fn~ - New file
   - ~g<C-g>~ - Show cursor position info

* Plugin Categories Summary
  - **Plugin Manager**: 1 (lazy.nvim)
  - **Core Utilities**: 4 (snacks, plenary, sqlite, nui)
  - **Editor Enhancement**: 8 plugins
  - **Coding Tools**: 22 plugins (including test adapters)
  - **UI Components**: 9 plugins
  - **Treesitter**: 3 plugins
  - **LSP & Tools**: 5 plugins
  - **Formatting & Linting**: 2 plugins
  - **Language Support**: 16 plugins
  - **Terminal**: 1 plugin
  - **Colorschemes**: 6 themes
  
  **Total**: 73 plugins configured